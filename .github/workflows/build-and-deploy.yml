name: Build and Deploy

on:
  push:
    branches: [ main ]
    paths:
      - 'server.js'
      - 'package.json'
      - 'Dockerfile'
      - 'public/**'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag'
        required: true
        default: 'v1.0.0'

# Wichtig: Permissions fÃ¼r GITHUB_TOKEN setzen
permissions:
  contents: write
  packages: write

env:
  DOCKER_USERNAME: nebu2k
  IMAGE_NAME: argocd-demo-app
  REGISTRY: docker.io

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      code-changed: ${{ steps.changes.outputs.code }}
      k8s-changed: ${{ steps.changes.outputs.k8s }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Detect changes
      id: changes
      run: |
        # Check if we have a previous commit
        if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
          # We have previous commits, check differences
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        else
          # First commit or no previous commits, check all files
          CHANGED_FILES=$(git ls-files)
        fi
        
        echo "Changed files: $CHANGED_FILES"
        
        # Check if code files changed
        if echo "$CHANGED_FILES" | grep -E '\.(js|json|dockerfile)$|^Dockerfile$|^public/' >/dev/null; then
          echo "code=true" >> $GITHUB_OUTPUT
        else
          echo "code=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if k8s files changed
        if echo "$CHANGED_FILES" | grep -E '^k8s/' >/dev/null; then
          echo "k8s=true" >> $GITHUB_OUTPUT
        else
          echo "k8s=false" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    needs: detect-changes
    if: needs.detect-changes.outputs.code-changed == 'true'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Wichtig: Token fÃ¼r Push-Berechtigung verwenden
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
        
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Generate version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=v$(date +%Y%m%d)-$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
        fi
        echo "Generated version: $(cat $GITHUB_OUTPUT)"
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}
          ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          NODE_ENV=production
          APP_VERSION=${{ steps.version.outputs.VERSION }}
          
    - name: Update Kubernetes deployment
      run: |
        # Update Docker image tag
        sed -i 's|image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:.*|image: ${{ env.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.VERSION }}|' k8s/deployment.yaml
        
        # Update version labels (ohne 'v' prefix fÃ¼r labels)
        VERSION_CLEAN=$(echo "${{ steps.version.outputs.VERSION }}" | sed 's/^v//')
        sed -i "s|version: v.*|version: v${VERSION_CLEAN}|g" k8s/deployment.yaml
        
        # Update nur APP_VERSION environment variable (nicht NODE_ENV oder PORT)
        sed -i "/APP_VERSION/{n; s|value: \".*\"|value: \"${VERSION_CLEAN}\"|;}" k8s/deployment.yaml
        
        echo "Updated deployment.yaml:"
        echo "=== Image ==="
        cat k8s/deployment.yaml | grep image:
        echo "=== Version Labels ==="
        cat k8s/deployment.yaml | grep "version:"
        echo "=== Environment Variables ==="
        cat k8s/deployment.yaml | grep -A1 -B1 "APP_VERSION\|NODE_ENV\|PORT"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add k8s/deployment.yaml
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸš€ Auto-update image to ${{ steps.version.outputs.VERSION }}"
          # Verwende GITHUB_TOKEN fÃ¼r Push
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main
        fi

  k8s-only-changes:
    needs: detect-changes
    if: needs.detect-changes.outputs.k8s-changed == 'true' && needs.detect-changes.outputs.code-changed == 'false'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Notify K8s changes
      run: |
        echo "ðŸ”§ Kubernetes configuration changes detected!"
        echo "ðŸ“‹ Changed files:"
        
        # Check if we have a previous commit
        if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
          # We have previous commits, show differences
          git diff --name-only HEAD~1 HEAD | grep '^k8s/' || echo "No k8s files in this specific commit"
        else
          # First commit or no previous commits, show all k8s files
          git ls-files | grep '^k8s/' || echo "No k8s files found"
        fi
        
        echo "âœ… ArgoCD will automatically sync these changes."
        echo "ðŸš€ No Docker build needed for configuration-only changes."